{"name":"Csster","tagline":"Javascript library to generate CSS styles similar to SASS","body":"# Csster\r\n          \r\nConcisely generate CSS style rules within Javascript.  Features:\r\n\r\n* standard \"object literal\"/JSON format with good editor support\r\n* nesting to DRY up stylesheets\r\n* color functions like <code>darken</code> and <code>saturate</code>\r\n* built-in macros for common CSS idioms like *clearfix*, *rounded corners*, *drop shadows*.\r\n* extension points for custom behavior or cross-browser support.\r\n* and all the plain old Javascript behavior: functions, data structures, looping, Math operations, etc.\r\n\r\nSlideshow introduction: https://docs.google.com/present/view?id=dfm357b6_49c4d3fpdm&interval=15\r\n\r\n## Usage\r\n\r\n### Bundler (Rails) Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'csster'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install csster\r\n    \r\nWithin your `application.js`, add \r\n\r\n    //= require csster\r\n\r\n\r\n### Node NPM Install\r\n\r\n    npm install csster\r\n\r\n### Creating Stylesheets (Brower/Client Side)\r\n\r\nAll code is packaged into a single Javascript file download, [csster.js](http://ndpsoftware.com/csster/csster.js). There are no external dependencies.\r\n\r\n```javascript\r\nrequire('csster.js'); // however you manage dependencies\r\n\r\nCsster.style({\r\n  h1: {\r\n    fontSize: 18,\r\n    color: 'red'\r\n  }\r\n});\r\n```\r\n\r\nThe result is inserted in DOM automatically at the bottom of the &lt;head&gt; element:\r\n\r\n```html\r\n...\r\n&lt;style type=\"text/stylesheet\"&gt;\r\nh1 {\r\nfont-size: 18px;\r\ncolor: red;\r\n}\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n...\r\n```\r\n\r\n### Format of CSS Rules\r\n\r\nThe *style* method accepts CSS rules passed either as arrays or hashes, arrays just being\r\na way to order the hashes. For example:\r\n\r\n<pre>\r\n{\r\n    ul: {\r\n      margin: 5,\r\n      padding: 0,\r\n    }\r\n    'ul li:first': {\r\n      paddingLeft: 20px\r\n    }\r\n}\r\n</pre>\r\n\r\nNote that\r\n\r\n* property names are automatically converted to hyphenated format from camelcase, so in many cases you can omit the quotation marks. ('float' needs to quoted since it's a reserved word.)\r\n* all raw numbers are assumed to be \"pixels\" (or \"px\"), and rendered as such.\r\n* any sort of selectors are allowed... they are just passed through to the stylesheet.\r\n\r\n#### Nesting\r\nCsster supports nesting of rules to keep things more concise:\r\n<pre>\r\n{\r\n    ul: {\r\n      margin: 5,\r\n      li: {\r\n        paddingLeft: 20,\r\n        '&:hover': {\r\n          color: 'red'\r\n        }\r\n      }\r\n    }\r\n}\r\n</pre>\r\n\r\nThe \"li\" property in this case might be a selector or might be a property name. A list of valid\r\nproperty names is used to identify properties right now, and otherwise it's considered a sub-selector.\r\n\r\nCsster supports SASS's \"&\" operator, to indicate that the selector should be combined with the parent selector.\r\nInstead of the default \"any descendent\" space character being inserted, no space is inserted.\r\n\r\nCombined rules (with commas) are expanded as expected, so nested rules with commas have their parents expanded.\r\n\r\n\r\n\r\n\r\n#### Functions\r\nMost manipulations will fall into Javascript's language support, as far as any math or looping. Use Javascript to write necessary functions.\r\n\r\nfunctions/color.es6 contains SASS-like color functions mixed into the base String object:\r\n\r\n*  <code>\"#ab342c\".darken(%)</code> -- make color darker by given percent\r\n*  <code>\"#ab342c\".lighten(%)</code> -- make color lighter by given percent\r\n*  <code>\"#ab342c\".saturate(%)</code>  -- make color more saturated by given percent. To *desaturate*, use negative values for the percent. Note that <code>\"#ab342c\".saturate(-100)</code> renders in grayscale.\r\n\r\nThere are also color conversion routines if you want to build your own manipulation.\r\n\r\n*  <code>\"#ab342c\".toRGB()</code>\r\n*  <code>\"#ab342c\".toHSL()</code>\r\n*  <code>Csster.hslToHexColor(h,s,l)</code>\r\n\r\nOpacity is currently not supported by the color model.\r\n\r\n#### Macros using \"has\" key\r\n\r\nThere are a host of pre-made macros that may be useful:\r\n\r\n* <code>roundedCorners(radius)</code> -- add rounded corners on all sides\r\n* <code>roundedCorners(side, radius)</code> -- add rounded corners on specified side: <code>'top'</code>, <code>'left'</code>, <code>'bottom'</code> or <code>'right'</code>\r\n* <code>roundedCorners(corner, radius)</code> -- add rounded corners to a specified corner: <code>'tl'</code>, <code>'tr'</code>, <code>'bl'</code> or <code>'br'</code>\r\n* <code>imageReplacement(width, height, img, imgXPosition=0, imgYPosition=0)</code> -- phark image replacement with optional background image offset.\r\n* <code>boxShadow([xoffset, yoffset], radius, color)</code>\r\n* <code>verticalCentering(height)</code> and <code>horizontalCentering(width)</code> -- center using the top 50% / margin-top -width/2 technique. See http://stackoverflow.com/questions/148251/css-centering-tricks\r\n* <code>clearfix()</code> -- standard clearfix\r\n\r\nTo \"mix these in\", use the \"has\" key:\r\n\r\n<pre>\r\n{\r\n    'div#featured_box': {\r\n      backgroundColor: '#394c89',\r\n      has: roundedCorner(5)\r\n    }\r\n}\r\n</pre>\r\n\r\nMultiple macros can be included by making that a list, eg. <code>has: [roundedCorners(5), dropShadow()]</code>.\r\n\r\nIt's all Javascript, so macros and more complex functions are easy to write. To mix in a set of values, create a function\r\nthat returns a hash of values, for example:\r\n\r\n<pre>\r\n    function roundedCorners(radius) {\r\n        return {\r\n            '-webkit-border-radius': radius,\r\n            '-moz-border-radius': radius,\r\n            'border-radius': radius\r\n        }\r\n    }\r\n</pre>\r\n\r\nA macro's properties will be overwritten by properties within including selector (or later included macros), similar to how the cascade takes the last defined value.\r\n\r\n\r\n## jQuery Integration\r\n\r\nIf jQuery is loaded first, Csster provides a \"csster\" method:\r\n\r\n<pre>\r\n   $('.sidebar').csster({ border: '5px solid green', padding: 10 });\r\n</pre>\r\n\r\nAs expected, this adds a rule to the document with the \".sidebar\" selector.\r\nIn general, this can be called identically to the <code>css()</code> function.\r\nThis is useful is the DOM on the page is dynamic and when a rule is more efficient than applying\r\na style repeatedly to all the DOM nodes.\r\n\r\nThere are a few limitations: Currently a \"context\" is not supported.\r\nAnd be careful, since not all jQuery selectors are valid CSS selectors--\r\nnothing is done to convert or report unsupported selectors (just like regular CSS).\r\n\r\n## Extending Csster\r\n\r\nCsster is built as an extensible system.\r\n\r\n### Adding Custom Property Names\r\nUse <code>Csster.addPropertyNames</code> to add any non-standard property names you'd like to be considered valid. The build-in tool rejects non-standard property names, although by default popular \"-moz\" and \"-webkit\" properties are added.\r\n\r\n### Pre-process rules\r\n<del>Functions called before properties are processed stored in <code>Csster.propertyPreprocessors</code>. Callback is provided a hash of properties to values, which it modifies in any way it wants. This is used to interpret macros.</del>\r\n\r\n<del>### Post-processing\r\nFunctions called after rules are processed stored in <code>Csster.rulesPostProcessors</code>. Called with an array of processed rules. Can be used to eliminate duplicates, modify selectors, etc. Standard list simplifies overly complex selectors with multiple IDs.\r\n\r\nA convenient built-in function is <code>compressSelectors</code>. Using this processor, rules with multiple '#'s are simplified. For example, '#a #b #c' becomes '#c'. Usually this is what you will want, so include it with <code>Csster.rulePostProcessors.push(Csster.compressSelectors);</code>.\r\n\r\nThis is used to write custom browser overrides. For example, this one makes opacity work for IE:\r\n\r\n<pre>\r\n  Csster.rulesPostProcessors.push(function ieOpacity(rules) {\r\n    // http://www.smashingmagazine.com/2010/04/28/css3-solutions-for-internet-explorer/\r\n    if (Csster.browserInfo().msie) {\r\n      for (var i = 0; i &lt; rules.length; i++) {\r\n        var rule = rules[i];\r\n        var value = rule.props['opacity']\r\n        if (value) {\r\n          value = Math.round(value * 100.0);\r\n          rules[i].props['filter'] = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + value + ')';\r\n        }\r\n      }\r\n    }\r\n  });\r\n</pre>\r\n</del>\r\n\r\n### Inserting into the DOM\r\nFunction that outputs a set of rules into the DOM is <code>Csster.insertCss</code> and can be replaced if desired.\r\n\r\n## V2.0 Changes\r\n\r\n### To upgrade from 1.0 or before\r\n\r\n* Change `Csster.browser` to call `Csster.browserInfo()`, which returns the same thing.\r\n* Change `has:` macro implementations to `mixin:`.\r\n\r\n### Other changes:\r\n\r\n* use ES6 for implementation and provide a more compressed and clean script.\r\n* add ability to turn off property name validation.\r\n* add ability to warn about unknown browser extensions for property names.\r\n\r\n\r\n## Links\r\n\r\n* [Demo of the color functions and macros](http://ndpsoftware.com/csster/demo.html)\r\n* [Demo of using to build a chart](http://ndpsoftware.com/csster/demo_chart.html)\r\n* [Blog post](http://ndpsoft.blogspot.com/2010/09/introducing-csster.html)\r\n\r\n\r\n## Development\r\n\r\n### Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n\r\n## Releasing\r\n\r\n1. Make changes\r\n2. Update `bin/build.sh#2` `VERSION=` code.\r\n3. `bin/build.sh`\r\n4. `rake build`\r\n5. `rake checkin`\r\n6. `rake push...`\r\n7. `rake release`\r\n8. `npm publish`\r\n\r\n\r\n### TDD\r\n\r\nThe design was driven by [the specs](http://ndpsoftware.com/csster/spec_runner.html).\r\n\r\n### Building\r\n\r\n`./bin/build.sh`\r\n\r\n\r\n\r\n## Todo\r\n\r\n* decompile existing stylesheets\r\n\r\n\r\n\r\n## Motivation\r\n\r\nThis project comes from my frustration of trying to build standalone Javascript widgets. Web\r\nprojects always involve the combination of HTML DOM, CSS and Javascript. It's often simpler to\r\ngenerate the necessary DOM within your Javascript, removing any coupling (and a simpler calling\r\nconvention) to a specific web page. But most widgets have certain style rules. To avoid\r\nany coupling with the CSS at all, styles can be included inline, but these gets bulky \r\nand hard to read. The \"rule\" nature of CSS is nice. So widgets then have a Javascript\r\nand CSS component. Wouldn't it be nice, though, to remove that CSS component. \r\n\r\nWith the advent of SASS, the coupling is even more complicated, as now there's some other\r\ntool completely unrelated to your component, written in some other language. Wouldn't\r\na unified approach be nice?\r\n\r\n\r\n## Similar projects\r\n\r\nhttp://revnode.com/oss/css/\r\n\r\n## Legal\r\n\r\nCopyright (c) 2010-2016 Andrew J. Peterson\r\n[Apache License](https://github.com/ndp/csster/raw/master/LICENSE)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}